(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[286],{933:function(e,r,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/learn/m7-clean-code",function(){return n(3033)}])},3033:function(e,r,n){"use strict";n.r(r),n.d(r,{__toc:function(){return c}});var i=n(651),t=n(3530),a=n(7380);let c=[{depth:2,value:"Learn",id:"learn"},{depth:2,value:"Apply",id:"apply"},{depth:3,value:"M7.1 - Architectures Compared",id:"m71---architectures-compared"},{depth:3,value:"M7.2 - Code Architecture of /core",id:"m72---code-architecture-of-core"},{depth:3,value:"M7.3 - Refactor Album",id:"m73---refactor-album"},{depth:3,value:"M7.4 - DB Refactor",id:"m74---db-refactor"}];function s(e){let r=Object.assign({h1:"h1",p:"p",h2:"h2",ul:"ul",li:"li",a:"a",h3:"h3",code:"code"},(0,a.a)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{children:"Module 7: Clean Code Architecture"}),"\n",(0,i.jsx)(r.p,{children:"Green Boost repositories organize code such that it is modular, adaptable, and maintainable. The code organization techniques used draw upon ideas from Domain Driven Design, Hexagonal Architecture, and Vertical Slice Architecture."}),"\n",(0,i.jsx)(r.h2,{id:"learn",children:"Learn"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Read Serverless Clean Architecture & Code with Domain-Driven Design Articles","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Note, these articles have enterprise use cases in mind. The GB app you created in week 1 is meant to be approachable so you won't see all of these concepts within the GB /core workspace"}),"\n",(0,i.jsxs)(r.li,{children:["Read ",(0,i.jsx)(r.a,{href:"https://blog.serverlessadvocate.com/serverless-clean-architecture-code-with-domain-driven-design-852796846d28",children:"Part 1: Intro, What, Why"}),". Focus on hexagonal and onion architecture concepts"]}),"\n",(0,i.jsxs)(r.li,{children:["Optional: read ",(0,i.jsx)(r.a,{href:"https://blog.serverlessadvocate.com/serverless-clean-architecture-code-with-domain-driven-design-part-2-9ad0882ff85b",children:"Part 2: Aggregates, Value Objects, Events"})]}),"\n",(0,i.jsxs)(r.li,{children:["Optional: read ",(0,i.jsx)(r.a,{href:"https://blog.serverlessadvocate.com/serverless-architecture-layers-ddd-part-3-the-domain-layer-43ffce28806f",children:"Part 3: DDD"})]}),"\n",(0,i.jsxs)(r.li,{children:["Optional: read ",(0,i.jsx)(r.a,{href:"https://blog.serverlessadvocate.com/serverless-architecture-layers-ddd-part-4-the-data-layer-8d27b5889034",children:"Part 4: The Data Layer"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["The previous series sets up a lot of boilerplate code designed to help you organize an enterprise grade app with DDD in mind. But what if you're building a simpler app?","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Read ",(0,i.jsx)(r.a,{href:"https://blog.serverlessadvocate.com/serverless-lightweight-clean-code-approach-84133c90eeeb",children:"Serverless Light Weight Clean Code Approach"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["Read Amazon Prescriptive Guidance: ",(0,i.jsx)(r.a,{href:"https://docs.aws.amazon.com/pdfs/prescriptive-guidance/latest/hexagonal-architectures/hexagonal-architectures.pdf",children:"Building hexagonal architectures on AWS"})]}),"\n",(0,i.jsxs)(r.li,{children:["Read ",(0,i.jsx)(r.a,{href:"https://www.jimmybogard.com/vertical-slice-architecture/",children:"Vertical Slice Architecture"})]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"apply",children:"Apply"}),"\n",(0,i.jsx)(r.h3,{id:"m71---architectures-compared",children:"M7.1 - Architectures Compared"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Why is the onion/evolutionary architecture beneficial?"}),"\n",(0,i.jsx)(r.li,{children:"What potential issues do you see if domain code (inner layer) starts depending upon adapters (outer layers)?"}),"\n",(0,i.jsx)(r.li,{children:"What's the benefit of organizing code into vertical slices?"}),"\n",(0,i.jsx)(r.li,{children:"How does adding a new feature compare between code organized horizontally (by onion layer) or vertically (by feature)?"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"m72---code-architecture-of-core",children:"M7.2 - Code Architecture of /core"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Review the code architecture of ",(0,i.jsx)(r.code,{children:"core/src/modules/item/*"}),". Do you think it's modular, adaptable, and flexible? Why or why not?"]}),"\n",(0,i.jsxs)(r.li,{children:["Review the code architecture of ",(0,i.jsx)(r.code,{children:"core/src/modules/album/*"}),". How does it compare?"]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"m73---refactor-album",children:"M7.3 - Refactor Album"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Refactor ",(0,i.jsx)(r.code,{children:"core/src/modules/album/*"})," to follow code architecture best practices."]}),"\n",(0,i.jsxs)(r.li,{children:["Use ",(0,i.jsx)(r.code,{children:"core/src/modules/item/*"})," as a guide."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"m74---db-refactor",children:"M7.4 - DB Refactor"}),"\n",(0,i.jsx)(r.p,{children:"Users cannot get enough of your new album feature. The load on the Aurora PostgreSQL cluster is too great."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Refactor the persistence of your album entities to DynamoDB."}),"\n",(0,i.jsx)(r.li,{children:"Did isolating the code interacting with the DB in a repository file simplify refactoring to DynamoDB?"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Thank you for completing the Green Boost Learn Modules. Congrats! \uD83C\uDF89"})]})}r.default=(0,t.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,a.a)(),e.components);return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(s,{...e})}):s(e)},pageOpts:{filePath:"src/pages/learn/m7-clean-code.mdx",route:"/learn/m7-clean-code",timestamp:172150086e4,title:"Module 7: Clean Code Architecture",headings:c},pageNextRoute:"/learn/m7-clean-code"})}},function(e){e.O(0,[530,888,774,179],function(){return e(e.s=933)}),_N_E=e.O()}]);